What is functional programming, and how does it differ from imperative programming?
a. Functional programming focuses on using pure functions and immutable data, while imperative programming uses statements to change the program state directly.
b. Functional programming focuses on using loops and conditions, while imperative programming uses function composition.
c. Functional programming emphasizes object-oriented design, while imperative programming emphasizes procedural design.
d. Functional programming focuses on using global variables, while imperative programming avoids them.
Answer: a

Which programming paradigm emphasizes the use of pure functions?
a. Functional programming.
b. Object-oriented programming.
c. Procedural programming.
d. Event-driven programming.
Answer: a

Define a pure function.
a. A function that changes the state of a program.
b. A function that always produces the same output for the same input and does not cause any side effects.
c. A function that performs input/output operations.
d. A function that uses loops and conditions.
Answer: b

What is the primary advantage of using pure functions?
a. Pure functions can change the program state efficiently.
b. Pure functions can handle I/O operations effectively.
c. Pure functions are easier to reason about, test, and debug.
d. Pure functions allow for better object-oriented design.
Answer: c

Give an example of a pure function.
a. A function that adds two numbers together without modifying any variables outside its scope.
b. A function that reads user input from the console.
c. A function that updates a global variable.
d. A function that generates a random number.
Answer: a

What are side effects in the context of programming?
a. Modifications to the state of a program that occur outside the function's scope.
b. Functions that do not produce any output.
c. Errors that occur during program execution.
d. Statements that change the program flow.
Answer: a

Why should we strive to minimize side effects in functional programming?
a. Side effects improve program clarity and maintainability.
b. Side effects make it easier to reason about the behavior of functions.
c. Side effects simplify program testing.
d. Side effects increase program performance.
Answer: b

Name one potential drawback of impure functions.
a. Impure functions can make it harder to understand and predict the behavior of a program.
b. Impure functions always produce incorrect results.
c. Impure functions are slower than pure functions.
d. Impure functions cannot be used in functional programming.
Answer: a

How can you identify if a function has side effects?
a. Look for any operations that modify variables outside the function's scope.
b. Check if the function has a return statement.
c. Determine if the function has a high cyclomatic complexity.
d. Analyze the function's algorithmic complexity.
Answer: a

What is referential transparency?
a. A function that can be replaced with its result without affecting the program's behavior.
b. A function that performs I/O operations.
c. A function that changes the state of a program.
d. A function that depends on external factors.
Answer: a

Can impure functions be referentially transparent? Why or why not?
a. Yes, impure functions can be referentially transparent because they always produce the same output for the same input.
b. No, impure functions cannot be referentially transparent because their behavior can depend on external factors.
c. Impure functions are always referentially transparent.
d. Impure functions cannot be used in functional programming.
Answer: b

What are the potential consequences of relying heavily on impure functions in a program?
a. Programs with many impure functions can be harder to understand, debug, and maintain.
b. Impure functions improve program performance.
c. Impure functions simplify program testing.
d. Impure functions ensure better object-oriented design.
Answer: a

What is the difference between pure and impure functions?
a. Pure functions always produce side effects, while impure functions do not.
b. Pure functions can change the state of a program, while impure functions cannot.
c. Pure functions are referentially transparent and do not produce side effects, while impure functions may have side effects.
d. Pure functions cannot be used in functional programming, while impure functions can.
Answer: c

Which programming paradigm promotes immutability?
a. Object-oriented programming.
b. Procedural programming.
c. Functional programming.
d. Event-driven programming.
Answer: c

What is the purpose of using immutable data in functional programming?
a. Immutable data allows for better object-oriented design.
b. Immutable data simplifies program testing.
c. Immutable data ensures program security.
d. Immutable data guarantees that data cannot be changed once created.
Answer: d

How can you avoid side effects in functional programming?
a. By using pure functions and immutable data.
b. By using global variables extensively.
c. By avoiding loops and conditions.
d. By performing I/O operations within functions.
Answer: a

Which of the following statements is true about pure functions?
a. Pure functions are always faster than impure functions.
b. Pure functions cannot be composed or combined.
c. Pure functions can modify the program state.
d. Pure functions have no side effects.
Answer: d

What is the main goal of functional programming?
a. To focus on the efficient use of global variables.
b. To avoid using loops and conditions in programs.
c. To emphasize mutable data structures.
d. To emphasize the use of pure functions and immutable data.
Answer: d

Which of the following is a side effect?
a. Printing a message to the console.
b. Performing arithmetic calculations.
c. Assigning a value to a local variable.
d. Returning a result from a function.
Answer: a

In functional programming, what does it mean for a function to be stateless?
a. The function always produces the same output for the same input.
b. The function has no return statement.
c. The function does not modify any variables.
d. The function depends on external factors.
Answer: c

Which of the following is a characteristic of imperative programming?
a. Emphasis on pure functions.
b. Avoidance of side effects.
c. Use of statements to change program state.
d. Reliance on recursion for computation.
Answer: c

Which type of function can be easily tested and debugged?
a. Impure functions.
b. Functions with side effects.
c. Pure functions.
d. Functions with high cyclomatic complexity.
Answer: c

What does it mean for a function to have referential transparency?
a. The function produces side effects.
b. The function can be replaced with its result without affecting the program's behavior.
c. The function has a high cyclomatic complexity.
d. The function uses loops and conditions.
Answer: b

Which programming paradigm is often associated with the use of immutable data?
a. Object-oriented programming.
b. Procedural programming.
c. Functional programming.
d. Event-driven programming.
Answer: c

Which of the following is a benefit of using pure functions in functional programming?
a. Improved program performance.
b. Ability to modify global variables easily.
c. Simplified program testing.
d. Easier reasoning about the behavior of functions.
Answer: d
â€”-------------------------------------------------------------------------------------------------------------------------------------------------------
What are lambda functions in Python?
a. Lambda functions are functions defined with the keyword "lambda" that can take any number of arguments and return a single expression result.
b. Lambda functions are functions that have no arguments and no return statement.
c. Lambda functions are functions that can only be used as decorators.
d. Lambda functions are functions defined with the keyword "lambda" that can only take a single argument.
Answer: a

What is the purpose of using lambda functions to create anonymous functions?
a. Lambda functions allow you to define functions with arbitrary numbers of arguments.
b. Lambda functions make the code more readable and maintainable.
c. Lambda functions allow you to define functions without assigning them a name.
d. Lambda functions enable you to perform complex mathematical calculations.
Answer: c

How can lambda functions be used to create higher order functions?
a. Lambda functions cannot be used to create higher order functions.
b. Lambda functions allow you to pass functions as arguments to other functions.
c. Lambda functions enable you to create functions with multiple return statements.
d. Lambda functions automatically convert functions into classes.
Answer: b

What are higher order functions?
a. Higher order functions are functions that take other functions as arguments or return functions as results.
b. Higher order functions are functions that have a higher complexity than regular functions.
c. Higher order functions are functions that use recursion instead of loops.
d. Higher order functions are functions that are defined using the "def" keyword instead of "lambda".
Answer: a

Which of the following is an example of a higher order function?
a. A function that adds two numbers together.
b. A function that performs string concatenation.
c. A function that takes another function as an argument and applies it to a list of elements.
d. A function that calculates the factorial of a number using recursion.
Answer: c

How do lambda functions differ from regular functions in terms of syntax?
a. Lambda functions require a return statement, while regular functions do not.
b. Lambda functions can only have a single argument, while regular functions can have multiple arguments.
c. Lambda functions are defined using the keyword "lambda", while regular functions are defined using the keyword "def".
d. Lambda functions cannot contain any loops or conditional statements, while regular functions can.
Answer: c

Which of the following correctly defines a lambda function that calculates the square of a number?
a. lambda x: x * x
b. lambda x: x ** 2
c. lambda x: pow(x, 2)
d. lambda x: square(x)
Answer: b

What is the advantage of using lambda functions over regular functions in certain scenarios?
a. Lambda functions are more efficient in terms of memory usage.
b. Lambda functions can be executed faster than regular functions.
c. Lambda functions provide a concise way to define simple functions without the need for a separate function definition.
d. Lambda functions allow for better error handling and exception catching.
Answer: c

Can lambda functions contain multiple lines of code?
a. Yes, lambda functions can contain multiple lines of code.
b. No, lambda functions can only contain a single expression.
c. Lambda functions can contain multiple lines, but they require explicit indentation.
d. Lambda functions cannot contain any code; they can only return a single value.
Answer: b

How can lambda functions be used to sort a list of tuples based on a specific element?
a. lambda x: x.sort(key=lambda x: x[1])
b. sorted_list = sorted(list, lambda x: x[1])
c. sorted_list = sorted(list, key=lambda x: x[1])
d. sorted_list = list.sort(key=lambda x: x[1])
Answer: c

What is the return type of a lambda function?
a. Lambda functions always return None.
b. Lambda functions return the same type as the expression evaluated inside the function.
c. Lambda functions can return any type, depending on the expression inside the function.
d. Lambda functions return a function object.
Answer: b

Can lambda functions access variables from the enclosing scope?
a. Yes, lambda functions can access variables from the enclosing scope.
b. No, lambda functions can only access variables passed as arguments.
c. Lambda functions can access variables from the enclosing scope, but only if they are global variables.
d. Lambda functions cannot access any variables outside their own scope.
Answer: a

What is the purpose of using lambda functions in functional programming?
a. Lambda functions allow for more efficient memory usage.
b. Lambda functions simplify program testing.
c. Lambda functions provide a way to define functions inline, making code more concise and expressive.
d. Lambda functions enable object-oriented design in functional programming.
Answer: c

Which of the following demonstrates the usage of a higher order function that takes a lambda function as an argument?
a. map(lambda x: x * 2, [1, 2, 3])
b. lambda x: x * 2
c. filter(lambda x: x % 2 == 0, [1, 2, 3])
d. reduce(lambda x, y: x + y, [1, 2, 3])
Answer: c

Can lambda functions have default parameter values?
a. Yes, lambda functions can have default parameter values.
b. No, lambda functions cannot have default parameter values.
c. Lambda functions can have default parameter values, but they need to be explicitly specified.
d. Lambda functions cannot have any parameters.
Answer: b

Which of the following higher order functions can be used to filter elements in a list based on a condition specified by a lambda function?
a. map()
b. reduce()
c. filter()
d. apply()
Answer: c

How are lambda functions typically used with higher order functions like map() and filter()?
a. Lambda functions are used as arguments to specify the transformation or filtering logic.
b. Lambda functions are used as return values from the higher order functions.
c. Lambda functions are used to create the higher order functions.
d. Lambda functions are not compatible with higher order functions.
Answer: a

Which of the following best describes an anonymous function?
a. A function that has no name and cannot be referenced.
b. A function that can only be used as a parameter in higher order functions.
c. A function that does not take any arguments.
d. A function that returns a lambda function.
Answer: a

How can lambda functions be used to iterate over a dictionary and perform operations on its values?
a. By using a lambda function as the key argument in the map() function.
b. By converting the dictionary values to a list and using a lambda function with a loop.
c. By using a lambda function as the argument in a for loop.
d. Lambda functions cannot be used to iterate over dictionaries.
Answer: c

Which of the following is a valid syntax for using a lambda function with the map() function to multiply each element of a list by 2?
a. map(lambda x: x * 2, [1, 2, 3])
b. map([1, 2, 3], lambda x: x * 2)
c. [1, 2, 3].map(lambda x: x * 2)
d. lambda x: x * 2.map([1, 2, 3])
Answer: a

What is the advantage of using higher order functions in programming?
a. Higher order functions allow for more efficient memory usage.
b. Higher order functions simplify program flow control.
c. Higher order functions enable code reuse and abstraction.
d. Higher order functions are faster in execution than regular functions.
Answer: c

Which of the following best describes the concept of "currying" in functional programming?
a. The process of converting a lambda function into a regular function.
b. The process of creating higher order functions using lambda functions.
c. The process of transforming a function that takes multiple arguments into a sequence of functions, each taking a single argument.
d. The process of optimizing lambda functions for better performance.
Answer: c

Can lambda functions have multiple return statements?
a. Yes, lambda functions can have multiple return statements.
b. No, lambda functions can only have a single return statement.
c. Lambda functions can have multiple return statements, but only if they are explicitly enclosed in a loop.
d. Lambda functions cannot have any return statements.
Answer: b

What is the result of evaluating the following lambda function: lambda x, y: x + y?
a. The lambda function returns the sum of x and y.
b. The lambda function returns the concatenation of x and y.
c. The lambda function returns the product of x and y.
d. The lambda function throws an error because it requires a single argument.
Answer: a

Can lambda functions have side effects?
a. Yes, lambda functions can have side effects.
b. No, lambda functions are always pure and side effect-free.
c. Lambda functions can have side effects, but only if explicitly specified using the side_effect keyword.
d. Lambda functions cannot have any statements, so they cannot have side effects.
Answer: b
â€”-------------------------------------------------------------------------------------------------------------------------------------------------------

What is the purpose of the map() function?
a. To transform data by applying a function to each element of an iterable.
b. To filter data by removing elements that do not satisfy a given condition.
c. To aggregate data by combining all elements into a single value.
d. To iterate over elements in a sequence without modifying them.
Answer: a

Which of the following best describes the filter() function?
a. It transforms data by applying a function to each element of an iterable.
b. It filters data by removing elements that do not satisfy a given condition.
c. It aggregates data by combining all elements into a single value.
d. It iterates over elements in a sequence without modifying them.
Answer: b

What is the primary purpose of the reduce() function?
a. To transform data by applying a function to each element of an iterable.
b. To filter data by removing elements that do not satisfy a given condition.
c. To aggregate data by combining all elements into a single value.
d. To iterate over elements in a sequence without modifying them.
Answer: c

How does the map() function differ from the filter() function?
a. The map() function transforms data, while the filter() function filters data.
b. The map() function filters data, while the filter() function transforms data.
c. The map() function and the filter() function are equivalent and can be used interchangeably.
d. The map() function and the filter() function are the same function with different names.
Answer: a

Which of the following is an example of using the map() function to transform a list of numbers by adding 1 to each element?
a. map(lambda x: x + 1, [1, 2, 3, 4])
b. map(lambda x: x > 1, [1, 2, 3, 4])
c. map(lambda x: x * 2, [1, 2, 3, 4])
d. map(lambda x: x % 2 == 0, [1, 2, 3, 4])
Answer: a

How does the filter() function work?
a. It transforms data by applying a function to each element of an iterable.
b. It filters data by removing elements that do not satisfy a given condition.
c. It aggregates data by combining all elements into a single value.
d. It iterates over elements in a sequence without modifying them.
Answer: b

Which of the following is an example of using the filter() function to remove even numbers from a list?
a. filter(lambda x: x % 2 == 0, [1, 2, 3, 4])
b. filter(lambda x: x > 1, [1, 2, 3, 4])
c. filter(lambda x: x + 1, [1, 2, 3, 4])
d. filter(lambda x: x * 2, [1, 2, 3, 4])
Answer: a

What is the purpose of the reduce() function?
a. To transform data by applying a function to each element of an iterable.
b. To filter data by removing elements that do not satisfy a given condition.
c. To aggregate data by combining all elements into a single value.
d. To iterate over elements in a sequence without modifying them.
Answer: c

Which of the following is an example of using the reduce() function to calculate the sum of a list of numbers?
a. reduce(lambda x, y: x * y, [1, 2, 3, 4])
b. reduce(lambda x, y: x - y, [1, 2, 3, 4])
c. reduce(lambda x, y: x / y, [1, 2, 3, 4])
d. reduce(lambda x, y: x + y, [1, 2, 3, 4])
Answer: d

How can lambda functions be integrated with map() and filter()?
a. Lambda functions are not compatible with map() and filter().
b. Lambda functions can only be used with map() but not with filter().
c. Lambda functions can only be used with filter() but not with map().
d. Lambda functions can be used as the function argument in both map() and filter().
Answer: d

Which of the following is an example of using a lambda function with the map() function to square each element in a list?
a. map(lambda x: x * x, [1, 2, 3, 4])
b. map(lambda x: x + 1, [1, 2, 3, 4])
c. map(lambda x: x % 2 == 0, [1, 2, 3, 4])
d. map(lambda x: x / 2, [1, 2, 3, 4])
Answer: a

Which of the following is an example of using a lambda function with the filter() function to filter out negative numbers from a list?
a. filter(lambda x: x > 0, [-1, 2, -3, 4])
b. filter(lambda x: x % 2 == 0, [-1, 2, -3, 4])
c. filter(lambda x: x + 1, [-1, 2, -3, 4])
d. filter(lambda x: x * 2, [-1, 2, -3, 4])
Answer: a

What is the result of applying the reduce() function on an empty list?
a. The reduce() function throws an error when applied to an empty list.
b. The reduce() function returns an empty list.
c. The reduce() function returns the first element of the list.
d. The reduce() function returns None.
Answer: a

Which of the following is an example of using the reduce() function to find the maximum value in a list of numbers?
a. reduce(lambda x, y: max(x, y), [1, 2, 3, 4])
b. reduce(lambda x, y: min(x, y), [1, 2, 3, 4])
c. reduce(lambda x, y: x + y, [1, 2, 3, 4])
d. reduce(lambda x, y: x * y, [1, 2, 3, 4])
Answer: a

What is the result of applying the reduce() function on a list with only one element?
a. The reduce() function throws an error when applied to a list with only one element.
b. The reduce() function returns the first element of the list.
c. The reduce() function returns None.
d. The reduce() function is not applicable to a list with only one element.
Answer: b

How does the reduce() function differ from the map() and filter() functions?
a. The reduce() function transforms data, while the map() and filter() functions aggregate data.
b. The reduce() function and the map() function are the same function with different names.
c. The reduce() function and the filter() function are equivalent and can be used interchangeably.
d. The reduce() function aggregates data by combining all elements into a single value, while the map() and filter() functions transform and filter data respectively.
Answer: d

Which of the following is an example of using a lambda function with the reduce() function to calculate the product of a list of numbers?
a. reduce(lambda x, y: x - y, [1, 2, 3, 4])
b. reduce(lambda x, y: x / y, [1, 2, 3, 4])
c. reduce(lambda x, y: x * y, [1, 2, 3, 4])
d. reduce(lambda x, y: x + y, [1, 2, 3, 4])
Answer: c

How can lambda functions enhance the functionality of map(), filter(), and reduce()?
a. Lambda functions can make the code shorter but do not add any additional functionality.
b. Lambda functions enable the use of conditional logic within map(), filter(), and reduce().
c. Lambda functions can modify the behavior of map(), filter(), and reduce() to work on multiple iterables.
d. Lambda functions cannot be used with map(), filter(), or reduce().
Answer: b

Which of the following is an example of using a lambda function with map() to convert a list of strings to uppercase?
a. map(lambda x: x.lower(), ["Hello", "World"])
b. map(lambda x: x.isdigit(), ["Hello", "123"])
c. map(lambda x: x.capitalize(), ["hello", "world"])
d. map(lambda x: x.isalpha(), ["123", "456"])
Answer: c

Which of the following is an example of using a lambda function with filter() to remove empty strings from a list?
a. filter(lambda x: x.isdigit(), ["Hello", "123", ""])
b. filter(lambda x: x.isupper(), ["HELLO", "WORLD", ""])
c. filter(lambda x: x.startswith("H"), ["Hello", "World", ""])
d. filter(lambda x: x.isspace(), [" ", " ", ""])
Answer: c

Which of the following is an example of using a lambda function with reduce() to concatenate a list of strings?
a. reduce(lambda x, y: x * y, ["Hello", "World", "!"])
b. reduce(lambda x, y: x - y, ["Hello", "World", "!"])
c. reduce(lambda x, y: x + y, ["Hello", "World", "!"])
d. reduce(lambda x, y: x / y, ["Hello", "World", "!"])
Answer: c

Can lambda functions be used independently without map(), filter(), or reduce()?
a. No, lambda functions can only be used in conjunction with map(), filter(), or reduce().
b. Yes, lambda functions can be used independently in any part of the code.
c. Lambda functions can be used independently, but they will not have any effect on the data.
d. Lambda functions cannot be defined or used independently; they always require a higher-order function.
Answer: b

What is the result of evaluating the following lambda function: lambda x: len(x)?
a. The lambda function returns the sum of the lengths of all elements in the input.
b. The lambda function returns the number of elements in the input.
c. The lambda function returns the first element of the input.
d. The lambda function throws an error because it requires a single argument.
Answer: b

Which of the following is an example of using a lambda function with map() to convert a list of integers to their absolute values?
a. map(lambda x: abs(x), [1, -2, 3, -4])
b. map(lambda x: x * 2, [1, -2, 3, -4])
c. map(lambda x: x % 2 == 0, [1, -2, 3, -4])
d. map(lambda x: x + 1, [1, -2, 3, -4])
Answer: a

Which of the following is an example of using a lambda function with filter() to select only positive numbers from a list?
a. filter(lambda x: x > 0, [-1, 2, -3, 4])
b. filter(lambda x: x % 2 == 0, [-1, 2, -3, 4])
c. filter(lambda x: x + 1, [-1, 2, -3, 4])
d. filter(lambda x: x * 2, [-1, 2, -3, 4])
Answer: a
â€”-------------------------------------------------------------------------------------------------------------------------------------------------------
What is a generator in Python?
a. A generator is a data structure that stores data in a sequence.
b. A generator is a function that returns an iterator.
c. A generator is a type of list comprehension.
d. A generator is a built-in class in Python for handling large datasets.
Answer: b

What are the benefits of using generators over lists?
a. Generators allow for more efficient memory usage, especially with large datasets.
b. Generators can store data in a more structured manner compared to lists.
c. Generators offer faster access times for elements.
d. Generators provide additional built-in methods for data manipulation.
Answer: a

When should you use a generator instead of a list comprehension?
a. Use a generator when you need to store the entire sequence in memory.
b. Use a generator when you want to apply a transformation to each element of a sequence.
c. Use a generator when you need to create a fixed-length sequence.
d. Use a generator when dealing with large datasets to conserve memory.
Answer: d

How does a generator differ from a regular function in Python?
a. Generators cannot be called like regular functions.
b. Generators use the return keyword to return values.
c. Generators use the yield keyword to return values and retain their state between calls.
d. Generators are not allowed to have parameters.
Answer: c

What is the purpose of the yield keyword in Python?
a. The yield keyword is used to terminate a loop.
b. The yield keyword is used to define a new variable.
c. The yield keyword is used to generate random values.
d. The yield keyword is used to return a value from a generator function and temporarily suspend the function's state.
Answer: d

How do you define a generator function in Python?
a. By using the def keyword and returning a list.
b. By using the gen keyword and returning a tuple.
c. By using the function keyword and returning an iterator.
d. By using the def keyword and including the yield keyword at least once in the function body.
Answer: d

What happens to the local variables in a generator function after a yield statement is executed?
a. Local variables are preserved, and their values are retained when the generator is resumed.
b. Local variables are cleared, and their values are lost when the generator is resumed.
c. Local variables are converted into global variables when the generator is resumed.
d. Local variables are deleted, and their values are irretrievable when the generator is resumed.
Answer: a

How do you use the next() function to iterate over a generator?
a. The next() function is not applicable to generators.
b. Use the next() function to retrieve the next element from the generator by calling it on the generator object.
c. Use the next() function to define the next element of the generator.
d. Use the next() function to create a new generator from an existing one.
Answer: b

What happens when a generator reaches the end of its sequence?
a. The generator raises an exception indicating that the end of the sequence has been reached.
b. The generator automatically starts over from the beginning of the sequence.
c. The generator enters a suspended state, and subsequent calls to next() will raise the StopIteration exception.
d. The generator returns None and continues generating values indefinitely.
Answer: c

Which of the following statements is true about loops and generators?
a. Loops cannot be used with generators; they can only be used with lists.
b. Generators and loops are incompatible and cannot be used together.
c. Loops can be used to iterate over the elements of a generator by calling next() within the loop.
d. Loops can only be used with generator expressions, not with generator functions.
Answer: c

Which of the following is an example of creating a generator using a generator expression?
a. (x for x in range(10))
b. [x for x in range(10)]
c. {x for x in range(10)}
d. set(x for x in range(10))
Answer: a

How can you iterate over a generator using a loop?
a. By calling next() on the generator until the StopIteration exception is raised.
b. By using a for loop, which automatically calls next() on the generator until it reaches the end of the sequence.
c. By converting the generator into a list and then iterating over the list using a loop.
d. By using a while loop and manually calling next() on the generator.
Answer: b

What is the purpose of the yield from statement in Python?
a. The yield from statement is used to yield multiple values from a generator.
b. The yield from statement is used to call another generator from within a generator.
c. The yield from statement is used to exit a generator and return to the calling code.
d. The yield from statement is not a valid statement in Python.
Answer: b

How do you create an infinite generator in Python?
a. By using a loop that continuously yields values.
b. By setting the yield statement to None.
c. By specifying an infinite range in a generator expression.
d. Infinite generators are not possible in Python.
Answer: a

Which of the following is an example of using a generator to iterate over a large dataset?
a. for item in range(10**6):
process(item)
b. for item in [x for x in range(10**6)]:
process(item)
c. for item in (x for x in range(10**6)):
process(item)
d. for item in {x for x in range(10**6)}:
process(item)
Answer: c

What is the primary advantage of using a generator over a list?
a. Generators are more memory-efficient.
b. Generators provide faster access to elements.
c. Generators can store more data than lists.
d. Generators offer more built-in methods for data manipulation.
Answer: a

When should you use a list comprehension instead of a generator?
a. When you need to conserve memory.
b. When you want to transform data elements.
c. When you want to iterate over a large dataset.
d. When you need to suspend the execution of a function.
Answer: b

What happens when a generator function encounters a yield statement?
a. The function exits and returns the yielded value.
b. The function enters a paused state and remembers its state.
c. The function raises an exception and terminates.
d. The function restarts from the beginning.
Answer: b

How can you iterate over a generator using a for loop?
a. By using the yield keyword inside the loop body.
b. By using the next() function in the loop condition.
c. By directly passing the generator to the for loop.
d. By converting the generator to a list and iterating over the list.
Answer: c

Which keyword is used to define a generator function in Python?
a. def
b. return
c. yield
d. generator
Answer: a

How can you create a generator object from a generator function?
a. By calling the generator function as a regular function.
b. By using the next() function on the generator function.
c. By converting the generator function to a list.
d. By assigning the generator function to a variable.
Answer: a

What happens when a generator reaches the end of its sequence?
a. It automatically starts over from the beginning.
b. It raises a StopIteration exception.
c. It waits for new elements to be added to the sequence.
d. It returns None and continues generating values.
Answer: b

Which of the following is true about the yield keyword?
a. It can only be used in generator functions.
b. It can be used to exit a loop or condition.
c. It is used to create an infinite loop.
d. It is a synonym for the return keyword.
Answer: a

How can you retrieve the next value from a generator?
a. By using the next() function on the generator object.
b. By calling the generator function again.
c. By using the yield keyword inside a loop.
d. By converting the generator to a list and indexing it.
Answer: a

What happens if you try to iterate over a generator that does not have any yield statements?
a. It raises a GeneratorExit exception.
b. It returns an empty iterator.
c. It raises a TypeError exception.
d. It enters an infinite loop.
Answer: b

